var searchIndex = {};
searchIndex['hpack'] = {"items":[[0,"","hpack","A module implementing HPACK functionality. Exposes a simple API for\nperforming the encoding and decoding of header sets, according to the\nHPACK spec.",null,null],[0,"encoder","","Implements all functionality related to encoding header blocks using\nHPACK.",null,null],[3,"Encoder","hpack::encoder","Represents an HPACK encoder. Allows clients to encode arbitrary header sets\nand tracks the encoding context. That is, encoding subsequent header sets\nwill use the context built by previous encode calls.",null,null],[5,"encode_integer","","Encode an integer to the representation defined by HPACK.",null,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"vec"}}],[11,"new","","Creates a new `Encoder` with a default static table, as defined by the\nHPACK spec (Appendix A).",0,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes the given headers using the HPACK rules and returns a newly\nallocated `Vec` containing the bytes representing the encoded header\nset.",0,{"inputs":[{"name":"encoder"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"decoder","hpack","Exposes the struct `Decoder` that allows for HPACK-encoded header blocks to\nbe decoded into a header list.",null,null],[3,"Decoder","hpack::decoder","Decodes headers encoded using HPACK.",null,null],[4,"IntegerDecodingError","","Represents all errors that can be encountered while decoding an\ninteger.",null,null],[13,"TooManyOctets","","5.1. specifies that \"excessively large integer decodings\" MUST be\nconsidered an error (whether the size is the number of octets or\nvalue). This variant corresponds to the encoding containing too many\noctets.",1,null],[13,"ValueTooLarge","","The variant corresponds to the case where the value of the integer\nbeing decoded exceeds a certain threshold.",1,null],[13,"NotEnoughOctets","","When a buffer from which an integer was supposed to be encoded does\nnot contain enough octets to complete the decoding.",1,null],[13,"InvalidPrefix","","Only valid prefixes are [1, 8]",1,null],[4,"StringDecodingError","","Represents all errors that can be encountered while decoding an octet\nstring.",null,null],[13,"NotEnoughOctets","","",2,null],[13,"HuffmanDecoderError","","",2,null],[4,"DecoderError","","Represents all errors that can be encountered while performing the decoding\nof an HPACK header set.",null,null],[13,"HeaderIndexOutOfBounds","","",3,null],[13,"IntegerDecodingError","","",3,null],[13,"StringDecodingError","","",3,null],[13,"InvalidMaxDynamicSize","","The size of the dynamic table can never be allowed to exceed the max\nsize mandated to the decoder by the protocol. (by perfroming changes\nmade by SizeUpdate blocks).",3,null],[6,"DecoderResult","","The result returned by the `decode` method of the `Decoder`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"integerdecodingerror"}],"output":{"name":"integerdecodingerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"stringdecodingerror"}],"output":{"name":"stringdecodingerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"decodererror"}],"output":{"name":"decodererror"}}],[11,"fmt","","",3,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Decoder` with all settings set to default values.",4,{"inputs":[{"name":"decoder"}],"output":{"name":"decoder"}}],[11,"set_max_table_size","","Sets a new maximum dynamic table size for the decoder.",4,{"inputs":[{"name":"decoder"},{"name":"usize"}],"output":null}],[11,"decode","","Decode the header block found in the given buffer.",4,null],[0,"huffman","hpack","A module exposing utilities for encoding and decoding Huffman-coded octet\nstrings, under the Huffman code defined by HPACK.\n(HPACK-draft-10, Appendix B)",null,null],[3,"HuffmanDecoder","hpack::huffman","A simple implementation of a Huffman code decoder.",null,null],[4,"HuffmanDecoderError","","Represents the error variants that the `HuffmanDecoder` can return.",null,null],[13,"PaddingTooLarge","","Any padding strictly larger than 7 bits MUST be interpreted as an error",5,null],[13,"InvalidPadding","","Any padding that does not correspond to the most significant bits of\nEOS MUST be interpreted as an error.",5,null],[13,"EOSInString","","If EOS is ever found in the string, it causes an error.",5,null],[6,"HuffmanDecoderResult","","The type that represents the result of the `decode` method of the\n`HuffmanDecoder`.",null,null],[11,"eq","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"huffmandecodererror"}],"output":{"name":"huffmandecodererror"}}],[11,"fmt","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new HuffmanDecoder with the default Huffman code table, as\ndefined in the HPACK-draft-10, Appendix B.",6,{"inputs":[{"name":"huffmandecoder"}],"output":{"name":"huffmandecoder"}}],[11,"decode","","Decodes the buffer `buf` into a newly allocated `Vec`.",6,null]],"paths":[[3,"Encoder"],[4,"IntegerDecodingError"],[4,"StringDecodingError"],[4,"DecoderError"],[3,"Decoder"],[4,"HuffmanDecoderError"],[3,"HuffmanDecoder"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[12,"module_path","","The module path of the message.",0,null],[12,"file","","The source file containing the message.",0,null],[12,"line","","The line containing the message.",0,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",1,null],[13,"Warn","","The \"warn\" level.",1,null],[13,"Info","","The \"info\" level.",1,null],[13,"Debug","","The \"debug\" level.",1,null],[13,"Trace","","The \"trace\" level.",1,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",2,null],[13,"Error","","Corresponds to the `Error` log level.",2,null],[13,"Warn","","Corresponds to the `Warn` log level.",2,null],[13,"Info","","Corresponds to the `Trace` log level.",2,null],[13,"Debug","","Corresponds to the `Debug` log level.",2,null],[13,"Trace","","Corresponds to the `Trace` log level.",2,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module.",null,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"bool"}}],[5,"log","","Logs a message.",null,{"inputs":[{"name":"loglevel"},{"name":"loglocation"},{"name":"arguments"}],"output":null}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3,{"inputs":[{"name":"log"},{"name":"loglevel"},{"name":"str"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",3,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",1,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",1,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",2,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"new","","Creates a new `LogRecord`.",4,{"inputs":[{"name":"logrecord"},{"name":"loglevel"},{"name":"loglocation"},{"name":"arguments"}],"output":{"name":"logrecord"}}],[11,"args","","The message body.",4,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"location","","The location of the log directive.",4,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",5,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",5,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};
initSearch(searchIndex);
